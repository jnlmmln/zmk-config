/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define MOUSE 2
#define MEDIA 3
#define NUM  4
#define SYM  5
#define FUN  6

// Miryoku layer aliases
#define U_BASE   BASE
#define U_NAV    NAV
#define U_MOUSE  MOUSE
#define U_MEDIA  MEDIA
#define U_NUM    NUM
#define U_SYM    SYM
#define U_FUN    FUN

// Miryoku key aliases
#define U_MT(MOD, TAP) &mt MOD TAP
#define U_LT(LAYER, TAP) &lt LAYER TAP

// w-40 physical layout:
// ╭────┬────┬────┬────┬────╮ ╭────┬────┬────┬────┬────╮
// │ 0  │ 1  │ 2  │ 3  │ 4  │ │ 5  │ 6  │ 7  │ 8  │ 9  │
// ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// │ 10 │ 11 │ 12 │ 13 │ 14 │ │ 15 │ 16 │ 17 │ 18 │ 19 │
// ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// │ 20 │ 21 │ 22 │ 23 │ 24 │ │ 25 │ 26 │ 27 │ 28 │ 29 │
// ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// │ 30 │ 31 │ 32 │ 33 │ 34 │ │ 35 │ 36 │ 37 │ 38 │ 39 │
// ╰────┴────┴────┴────┴────╯ ╰────┴────┴────┴────┴────╯

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 35 36 37 38 39>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34>;
            hold-trigger-on-release;
        };

        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Escape combo
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        // Enter combo
        combo_enter {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp ENTER>;
        };

        // Tab combo
        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };

        // Backspace combo
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };

        // Delete combo
        combo_del {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp DEL>;
        };

        // Caps word combo
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        // Activate FUN layer when both SYM and NAV are held
        fun_layer {
            if-layers = <SYM NAV>;
            then-layer = <FUN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base layer (Colemak-DH)
        base_layer {
            bindings = <
                &kp Q        &kp W        &kp F        &kp P        &kp B        &kp J        &kp L        &kp U        &kp Y        &kp SEMI
                &hml LGUI A  &hml LALT R  &hml LCTRL S &hml LSHFT T &kp G        &kp M        &hmr RSHFT N &hmr RCTRL E &hmr RALT I  &hmr RGUI O
                &kp Z        &kp X        &kp C        &kp D        &kp V        &kp K        &kp H        &kp COMMA    &kp DOT      &kp FSLH
                &kp ESC      &kp TAB      &u_lt MEDIA ESC &u_lt NAV SPACE &u_lt MOUSE TAB  &u_lt SYM ENTER &u_lt NUM BSPC &u_lt FUN DEL &kp BSPC &kp DEL
            >;
        };

        // Nav layer
        nav_layer {
            bindings = <
                &kp ESC      &kp LC(W)    &kp LC(F)    &kp LC(P)    &kp LC(B)    &kp LC(J)    &kp LC(L)    &kp LC(U)    &kp LC(Y)    &kp SEMI
                &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &kp LC(G)    &kp CAPS     &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT
                &kp LC(Z)    &kp LC(X)    &kp LC(C)    &kp LC(D)    &kp LC(V)    &kp INS      &kp HOME     &kp PG_DN    &kp PG_UP    &kp END
                &trans       &trans       &trans       &trans       &trans       &kp ENTER    &kp BSPC     &kp DEL      &trans       &trans
            >;
        };

        // Mouse layer
        mouse_layer {
            bindings = <
                &none        &none        &none        &none        &none        &none        &none        &none        &none        &none
                &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &none        &none        &none        &none        &none        &none
                &none        &none        &none        &none        &none        &none        &none        &none        &none        &none
                &trans       &trans       &trans       &trans       &trans       &none        &none        &none        &trans       &trans
            >;
        };

        // Media layer
        media_layer {
            bindings = <
                &none        &none        &none        &none        &none        &none        &none        &none        &none        &none
                &sk LGUI     &sk LALT     &sk LCTRL    &sk LSHFT    &none        &none        &kp C_PREV   &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT
                &none        &none        &none        &none        &none        &none        &none        &none        &none        &none
                &trans       &trans       &trans       &trans       &trans       &kp C_STOP   &kp C_PP     &kp C_MUTE   &trans       &trans
            >;
        };

        // Num layer
        num_layer {
            bindings = <
                &kp LBKT     &kp N7       &kp N8       &kp N9       &kp RBKT     &none        &none        &none        &none        &none
                &kp SEMI     &kp N4       &kp N5       &kp N6       &kp EQUAL    &none        &sk RSHFT    &sk RCTRL    &sk RALT     &sk RGUI
                &kp GRAVE    &kp N1       &kp N2       &kp N3       &kp BSLH     &none        &none        &none        &none        &none
                &kp DOT      &kp N0       &kp MINUS    &trans       &trans       &trans       &trans       &trans       &trans       &trans
            >;
        };

        // Sym layer
        sym_layer {
            bindings = <
                &kp LBRC     &kp AMPS     &kp STAR     &kp LPAR     &kp RBRC     &none        &none        &none        &none        &none
                &kp COLON    &kp DLLR     &kp PRCNT    &kp CARET    &kp PLUS     &none        &sk RSHFT    &sk RCTRL    &sk RALT     &sk RGUI
                &kp TILDE    &kp EXCL     &kp AT       &kp HASH     &kp PIPE     &none        &none        &none        &none        &none
                &kp LPAR     &kp RPAR     &kp UNDER    &trans       &trans       &trans       &trans       &trans       &trans       &trans
            >;
        };

        // Fun layer
        fun_layer {
            bindings = <
                &kp F12      &kp F7       &kp F8       &kp F9       &kp PSCRN    &none        &none        &none        &none        &none
                &kp F11      &kp F4       &kp F5       &kp F6       &kp SLCK     &none        &sk RSHFT    &sk RCTRL    &sk RALT     &sk RGUI
                &kp F10      &kp F1       &kp F2       &kp F3       &kp PAUSE_BREAK &none     &none        &none        &none        &none
                &kp K_MENU   &kp SPACE    &kp TAB      &trans       &trans       &trans       &trans       &trans       &trans       &trans
            >;
        };
    };
};

// Miryoku configuration
#define MIRYOKU_LAYER_BASE U_BASE
#define MIRYOKU_LAYER_NAV U_NAV
#define MIRYOKU_LAYER_MOUSE U_MOUSE
#define MIRYOKU_LAYER_MEDIA U_MEDIA
#define MIRYOKU_LAYER_NUM U_NUM
#define MIRYOKU_LAYER_SYM U_SYM
#define MIRYOKU_LAYER_FUN U_FUN
